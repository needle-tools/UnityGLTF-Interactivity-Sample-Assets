#if UNITY_EDITOR && HAVE_VISUAL_SCRIPTING
// TODO make runtime capable

using UnityEngine;
using UnityGLTF.Interactivity.VisualScripting.Schema;
using UnityGLTF.Interactivity.VisualScripting;

public class InterfaceSample : MonoBehaviour ,IInteractivityExport
{
    public void OnInteractivityExport(VisualScriptingExportContext context, GltfInteractivityExportNodes nodes)
    {

        var addNode = nodes.CreateNode(new Math_AddNode());
        addNode.SetValueInSocket("a", 1);
        addNode.SetValueInSocket("b", 2);
        addNode.OutValueSocket["value"].expectedType = ExpectedType.Int;

        //Get generic auto generated Schema: GenericUnitExport.GetAutoGeneratedSchema("math/sub")
        
        var equalNode = nodes.CreateNode(new Math_EqNode());
        equalNode.SetValueInSocket("a", 1);
        equalNode.SetValueInSocketSource("b", addNode, "value");
        
        var vector3Node = nodes.CreateNode(new Math_Combine3Node());
        vector3Node.SetValueInSocket("a", 0f);
        vector3Node.SetValueInSocket("b", 0f);
        vector3Node.SetValueInSocketSource("c", equalNode, "value", TypeRestriction.LimitToFloat);
        
        var setPositionNode = nodes.CreateNode(new Pointer_SetNode());
        UnitsHelper.AddPointerConfig(setPositionNode, "/nodes/{" + UnitsHelper.IdPointerNodeIndex + "}/translation", GltfTypes.Float3);
        int thisTransformIndex = context.exporter.GetTransformIndex(transform);
        UnitsHelper.AddPointerTemplateValueInput(setPositionNode, UnitsHelper.IdPointerNodeIndex, thisTransformIndex);
        setPositionNode.SetValueInSocketSource("value", vector3Node, "value", TypeRestriction.LimitToFloat3);
        
        var startNode = nodes.CreateNode(new Event_OnStartNode());
        startNode.SetFlowOut(Event_OnStartNode.IdFlowOut, setPositionNode, Pointer_SetNode.IdFlowIn);
       
    }
}

#endif